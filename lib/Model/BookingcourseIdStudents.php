<?php
/**
 * BookingcourseIdStudents
 *
 * PHP version 5
 *
 * @category Class
 * @package  YellowWave\SwaggerClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Planaday Public API URL
 *
 * This documentation describes the calls available in the public API of planaday.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace YellowWave\SwaggerClient\Model;

use \ArrayAccess;
use \YellowWave\SwaggerClient\ObjectSerializer;

/**
 * BookingcourseIdStudents Class Doc Comment
 *
 * @category Class
 * @package  YellowWave\SwaggerClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BookingcourseIdStudents implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'bookingcourse_id_students';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
        'gender' => 'string',
        'initials' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'email' => 'string',
        'address' => 'string',
        'house_number' => 'string',
        'house_number_extension' => 'string',
        'postal_code' => 'string',
        'city' => 'string',
        'phonenumber' => 'string',
        'date_of_birth' => 'string',
        'employee_id' => 'string',
        'costcentercode' => 'string',
        'company_position' => 'string',
        'is_contact_person' => 'bool',
        'is_student' => 'bool',
        'internal_reference' => 'string',
        'remark' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'gender' => null,
        'initials' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'address' => null,
        'house_number' => null,
        'house_number_extension' => null,
        'postal_code' => null,
        'city' => null,
        'phonenumber' => null,
        'date_of_birth' => null,
        'employee_id' => null,
        'costcentercode' => null,
        'company_position' => null,
        'is_contact_person' => null,
        'is_student' => null,
        'internal_reference' => null,
        'remark' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'gender' => 'gender',
        'initials' => 'initials',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'email' => 'email',
        'address' => 'address',
        'house_number' => 'house_number',
        'house_number_extension' => 'house_number_extension',
        'postal_code' => 'postal_code',
        'city' => 'city',
        'phonenumber' => 'phonenumber',
        'date_of_birth' => 'date_of_birth',
        'employee_id' => 'employeeId',
        'costcentercode' => 'costcentercode',
        'company_position' => 'company_position',
        'is_contact_person' => 'is_contact_person',
        'is_student' => 'is_student',
        'internal_reference' => 'internal_reference',
        'remark' => 'remark'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'gender' => 'setGender',
        'initials' => 'setInitials',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'address' => 'setAddress',
        'house_number' => 'setHouseNumber',
        'house_number_extension' => 'setHouseNumberExtension',
        'postal_code' => 'setPostalCode',
        'city' => 'setCity',
        'phonenumber' => 'setPhonenumber',
        'date_of_birth' => 'setDateOfBirth',
        'employee_id' => 'setEmployeeId',
        'costcentercode' => 'setCostcentercode',
        'company_position' => 'setCompanyPosition',
        'is_contact_person' => 'setIsContactPerson',
        'is_student' => 'setIsStudent',
        'internal_reference' => 'setInternalReference',
        'remark' => 'setRemark'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'gender' => 'getGender',
        'initials' => 'getInitials',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'address' => 'getAddress',
        'house_number' => 'getHouseNumber',
        'house_number_extension' => 'getHouseNumberExtension',
        'postal_code' => 'getPostalCode',
        'city' => 'getCity',
        'phonenumber' => 'getPhonenumber',
        'date_of_birth' => 'getDateOfBirth',
        'employee_id' => 'getEmployeeId',
        'costcentercode' => 'getCostcentercode',
        'company_position' => 'getCompanyPosition',
        'is_contact_person' => 'getIsContactPerson',
        'is_student' => 'getIsStudent',
        'internal_reference' => 'getInternalReference',
        'remark' => 'getRemark'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['initials'] = isset($data['initials']) ? $data['initials'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['house_number'] = isset($data['house_number']) ? $data['house_number'] : null;
        $this->container['house_number_extension'] = isset($data['house_number_extension']) ? $data['house_number_extension'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['phonenumber'] = isset($data['phonenumber']) ? $data['phonenumber'] : null;
        $this->container['date_of_birth'] = isset($data['date_of_birth']) ? $data['date_of_birth'] : null;
        $this->container['employee_id'] = isset($data['employee_id']) ? $data['employee_id'] : null;
        $this->container['costcentercode'] = isset($data['costcentercode']) ? $data['costcentercode'] : null;
        $this->container['company_position'] = isset($data['company_position']) ? $data['company_position'] : null;
        $this->container['is_contact_person'] = isset($data['is_contact_person']) ? $data['is_contact_person'] : null;
        $this->container['is_student'] = isset($data['is_student']) ? $data['is_student'] : null;
        $this->container['internal_reference'] = isset($data['internal_reference']) ? $data['internal_reference'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender gender
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets initials
     *
     * @return string
     */
    public function getInitials()
    {
        return $this->container['initials'];
    }

    /**
     * Sets initials
     *
     * @param string $initials initials
     *
     * @return $this
     */
    public function setInitials($initials)
    {
        $this->container['initials'] = $initials;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string $house_number house_number
     *
     * @return $this
     */
    public function setHouseNumber($house_number)
    {
        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets house_number_extension
     *
     * @return string
     */
    public function getHouseNumberExtension()
    {
        return $this->container['house_number_extension'];
    }

    /**
     * Sets house_number_extension
     *
     * @param string $house_number_extension house_number_extension
     *
     * @return $this
     */
    public function setHouseNumberExtension($house_number_extension)
    {
        $this->container['house_number_extension'] = $house_number_extension;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code postal_code
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets phonenumber
     *
     * @return string
     */
    public function getPhonenumber()
    {
        return $this->container['phonenumber'];
    }

    /**
     * Sets phonenumber
     *
     * @param string $phonenumber phonenumber
     *
     * @return $this
     */
    public function setPhonenumber($phonenumber)
    {
        $this->container['phonenumber'] = $phonenumber;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return string
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param string $date_of_birth date_of_birth
     *
     * @return $this
     */
    public function setDateOfBirth($date_of_birth)
    {
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string $employee_id employee_id
     *
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets costcentercode
     *
     * @return string
     */
    public function getCostcentercode()
    {
        return $this->container['costcentercode'];
    }

    /**
     * Sets costcentercode
     *
     * @param string $costcentercode costcentercode
     *
     * @return $this
     */
    public function setCostcentercode($costcentercode)
    {
        $this->container['costcentercode'] = $costcentercode;

        return $this;
    }

    /**
     * Gets company_position
     *
     * @return string
     */
    public function getCompanyPosition()
    {
        return $this->container['company_position'];
    }

    /**
     * Sets company_position
     *
     * @param string $company_position company_position
     *
     * @return $this
     */
    public function setCompanyPosition($company_position)
    {
        $this->container['company_position'] = $company_position;

        return $this;
    }

    /**
     * Gets is_contact_person
     *
     * @return bool
     */
    public function getIsContactPerson()
    {
        return $this->container['is_contact_person'];
    }

    /**
     * Sets is_contact_person
     *
     * @param bool $is_contact_person is_contact_person
     *
     * @return $this
     */
    public function setIsContactPerson($is_contact_person)
    {
        $this->container['is_contact_person'] = $is_contact_person;

        return $this;
    }

    /**
     * Gets is_student
     *
     * @return bool
     */
    public function getIsStudent()
    {
        return $this->container['is_student'];
    }

    /**
     * Sets is_student
     *
     * @param bool $is_student is_student
     *
     * @return $this
     */
    public function setIsStudent($is_student)
    {
        $this->container['is_student'] = $is_student;

        return $this;
    }

    /**
     * Gets internal_reference
     *
     * @return string
     */
    public function getInternalReference()
    {
        return $this->container['internal_reference'];
    }

    /**
     * Sets internal_reference
     *
     * @param string $internal_reference internal_reference
     *
     * @return $this
     */
    public function setInternalReference($internal_reference)
    {
        $this->container['internal_reference'] = $internal_reference;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
