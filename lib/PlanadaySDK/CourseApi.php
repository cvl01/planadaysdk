<?php
/**
 * CourseApi
 * PHP version 5
 *
 * @category Class
 * @package  YellowWave\SwaggerClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Planaday Public API URL
 *
 * This documentation describes the calls available in the public API of planaday.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace YellowWave\SwaggerClient\PlanadaySDK;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use YellowWave\SwaggerClient\ApiException;
use YellowWave\SwaggerClient\Configuration;
use YellowWave\SwaggerClient\HeaderSelector;
use YellowWave\SwaggerClient\ObjectSerializer;

/**
 * CourseApi Class Doc Comment
 *
 * @category Class
 * @package  YellowWave\SwaggerClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CourseApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAListOfCourses
     *
     * Get a list of courses
     *
     * @param  string $start Start date of planned courses to look for (YYYYMMDD) (required)
     * @param  string $end End date of planned courses to look for (YYYYMMDD) (required)
     * @param  float $templateid ID of the Coursetemplate to find courses for (optional)
     * @param  float $offset Start offset of courses to show (i.e. 25) (optional)
     * @param  float $limit Amount of courses to show in one response (i.e. 25, limited to 100) (optional)
     * @param  string $label labels which the course MUST have (see also label API calls) (optional)
     *
     * @throws \YellowWave\SwaggerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YellowWave\SwaggerClient\Model\InlineResponse2002
     */
    public function getAListOfCourses($start, $end, $templateid = null, $offset = null, $limit = null, $label = null)
    {
        list($response) = $this->getAListOfCoursesWithHttpInfo($start, $end, $templateid, $offset, $limit, $label);
        return $response;
    }

    /**
     * Operation getAListOfCoursesWithHttpInfo
     *
     * Get a list of courses
     *
     * @param  string $start Start date of planned courses to look for (YYYYMMDD) (required)
     * @param  string $end End date of planned courses to look for (YYYYMMDD) (required)
     * @param  float $templateid ID of the Coursetemplate to find courses for (optional)
     * @param  float $offset Start offset of courses to show (i.e. 25) (optional)
     * @param  float $limit Amount of courses to show in one response (i.e. 25, limited to 100) (optional)
     * @param  string $label labels which the course MUST have (see also label API calls) (optional)
     *
     * @throws \YellowWave\SwaggerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YellowWave\SwaggerClient\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAListOfCoursesWithHttpInfo($start, $end, $templateid = null, $offset = null, $limit = null, $label = null)
    {
        $returnType = '\YellowWave\SwaggerClient\Model\InlineResponse2002';
        $request = $this->getAListOfCoursesRequest($start, $end, $templateid, $offset, $limit, $label);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YellowWave\SwaggerClient\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAListOfCoursesAsync
     *
     * Get a list of courses
     *
     * @param  string $start Start date of planned courses to look for (YYYYMMDD) (required)
     * @param  string $end End date of planned courses to look for (YYYYMMDD) (required)
     * @param  float $templateid ID of the Coursetemplate to find courses for (optional)
     * @param  float $offset Start offset of courses to show (i.e. 25) (optional)
     * @param  float $limit Amount of courses to show in one response (i.e. 25, limited to 100) (optional)
     * @param  string $label labels which the course MUST have (see also label API calls) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfCoursesAsync($start, $end, $templateid = null, $offset = null, $limit = null, $label = null)
    {
        return $this->getAListOfCoursesAsyncWithHttpInfo($start, $end, $templateid, $offset, $limit, $label)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAListOfCoursesAsyncWithHttpInfo
     *
     * Get a list of courses
     *
     * @param  string $start Start date of planned courses to look for (YYYYMMDD) (required)
     * @param  string $end End date of planned courses to look for (YYYYMMDD) (required)
     * @param  float $templateid ID of the Coursetemplate to find courses for (optional)
     * @param  float $offset Start offset of courses to show (i.e. 25) (optional)
     * @param  float $limit Amount of courses to show in one response (i.e. 25, limited to 100) (optional)
     * @param  string $label labels which the course MUST have (see also label API calls) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAListOfCoursesAsyncWithHttpInfo($start, $end, $templateid = null, $offset = null, $limit = null, $label = null)
    {
        $returnType = '\YellowWave\SwaggerClient\Model\InlineResponse2002';
        $request = $this->getAListOfCoursesRequest($start, $end, $templateid, $offset, $limit, $label);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAListOfCourses'
     *
     * @param  string $start Start date of planned courses to look for (YYYYMMDD) (required)
     * @param  string $end End date of planned courses to look for (YYYYMMDD) (required)
     * @param  float $templateid ID of the Coursetemplate to find courses for (optional)
     * @param  float $offset Start offset of courses to show (i.e. 25) (optional)
     * @param  float $limit Amount of courses to show in one response (i.e. 25, limited to 100) (optional)
     * @param  string $label labels which the course MUST have (see also label API calls) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAListOfCoursesRequest($start, $end, $templateid = null, $offset = null, $limit = null, $label = null)
    {
        // verify the required parameter 'start' is set
        if ($start === null || (is_array($start) && count($start) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start when calling getAListOfCourses'
            );
        }
        // verify the required parameter 'end' is set
        if ($end === null || (is_array($end) && count($end) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end when calling getAListOfCourses'
            );
        }

        $resourcePath = '/course/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start !== null) {
            $queryParams['start'] = ObjectSerializer::toQueryValue($start, null);
        }
        // query params
        if ($end !== null) {
            $queryParams['end'] = ObjectSerializer::toQueryValue($end, null);
        }
        // query params
        if ($templateid !== null) {
            $queryParams['templateid'] = ObjectSerializer::toQueryValue($templateid, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, null);
        }
        // query params
        if ($label !== null) {
            $queryParams['label'] = ObjectSerializer::toQueryValue($label, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewCourseDetail
     *
     * View Course Detail
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     *
     * @throws \YellowWave\SwaggerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function viewCourseDetail($course_id)
    {
        $this->viewCourseDetailWithHttpInfo($course_id);
    }

    /**
     * Operation viewCourseDetailWithHttpInfo
     *
     * View Course Detail
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     *
     * @throws \YellowWave\SwaggerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewCourseDetailWithHttpInfo($course_id)
    {
        $returnType = '';
        $request = $this->viewCourseDetailRequest($course_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation viewCourseDetailAsync
     *
     * View Course Detail
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewCourseDetailAsync($course_id)
    {
        return $this->viewCourseDetailAsyncWithHttpInfo($course_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewCourseDetailAsyncWithHttpInfo
     *
     * View Course Detail
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewCourseDetailAsyncWithHttpInfo($course_id)
    {
        $returnType = '';
        $request = $this->viewCourseDetailRequest($course_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewCourseDetail'
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function viewCourseDetailRequest($course_id)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null || (is_array($course_id) && count($course_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $course_id when calling viewCourseDetail'
            );
        }

        $resourcePath = '/course/{course_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                '{' . 'course_id' . '}',
                ObjectSerializer::toPathValue($course_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewListOfDaypartsOfCourse
     *
     * View list of dayparts of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of dayparts to show (i.e. 25) (required)
     * @param  float $limit Amount of dayparts to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \YellowWave\SwaggerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function viewListOfDaypartsOfCourse($course_id, $offset, $limit)
    {
        $this->viewListOfDaypartsOfCourseWithHttpInfo($course_id, $offset, $limit);
    }

    /**
     * Operation viewListOfDaypartsOfCourseWithHttpInfo
     *
     * View list of dayparts of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of dayparts to show (i.e. 25) (required)
     * @param  float $limit Amount of dayparts to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \YellowWave\SwaggerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewListOfDaypartsOfCourseWithHttpInfo($course_id, $offset, $limit)
    {
        $returnType = '';
        $request = $this->viewListOfDaypartsOfCourseRequest($course_id, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation viewListOfDaypartsOfCourseAsync
     *
     * View list of dayparts of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of dayparts to show (i.e. 25) (required)
     * @param  float $limit Amount of dayparts to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewListOfDaypartsOfCourseAsync($course_id, $offset, $limit)
    {
        return $this->viewListOfDaypartsOfCourseAsyncWithHttpInfo($course_id, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewListOfDaypartsOfCourseAsyncWithHttpInfo
     *
     * View list of dayparts of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of dayparts to show (i.e. 25) (required)
     * @param  float $limit Amount of dayparts to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewListOfDaypartsOfCourseAsyncWithHttpInfo($course_id, $offset, $limit)
    {
        $returnType = '';
        $request = $this->viewListOfDaypartsOfCourseRequest($course_id, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewListOfDaypartsOfCourse'
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of dayparts to show (i.e. 25) (required)
     * @param  float $limit Amount of dayparts to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function viewListOfDaypartsOfCourseRequest($course_id, $offset, $limit)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null || (is_array($course_id) && count($course_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $course_id when calling viewListOfDaypartsOfCourse'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling viewListOfDaypartsOfCourse'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling viewListOfDaypartsOfCourse'
            );
        }

        $resourcePath = '/course/{course_id}/dayparts&offset={offset}&limit={limit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                '{' . 'course_id' . '}',
                ObjectSerializer::toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($offset !== null) {
            $resourcePath = str_replace(
                '{' . 'offset' . '}',
                ObjectSerializer::toPathValue($offset),
                $resourcePath
            );
        }
        // path params
        if ($limit !== null) {
            $resourcePath = str_replace(
                '{' . 'limit' . '}',
                ObjectSerializer::toPathValue($limit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewListOfImagesOfCourse
     *
     * View list of images of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of materials to show (i.e. 25) (required)
     * @param  float $limit Amount of materials to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \YellowWave\SwaggerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function viewListOfImagesOfCourse($course_id, $offset, $limit)
    {
        $this->viewListOfImagesOfCourseWithHttpInfo($course_id, $offset, $limit);
    }

    /**
     * Operation viewListOfImagesOfCourseWithHttpInfo
     *
     * View list of images of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of materials to show (i.e. 25) (required)
     * @param  float $limit Amount of materials to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \YellowWave\SwaggerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewListOfImagesOfCourseWithHttpInfo($course_id, $offset, $limit)
    {
        $returnType = '';
        $request = $this->viewListOfImagesOfCourseRequest($course_id, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation viewListOfImagesOfCourseAsync
     *
     * View list of images of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of materials to show (i.e. 25) (required)
     * @param  float $limit Amount of materials to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewListOfImagesOfCourseAsync($course_id, $offset, $limit)
    {
        return $this->viewListOfImagesOfCourseAsyncWithHttpInfo($course_id, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewListOfImagesOfCourseAsyncWithHttpInfo
     *
     * View list of images of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of materials to show (i.e. 25) (required)
     * @param  float $limit Amount of materials to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewListOfImagesOfCourseAsyncWithHttpInfo($course_id, $offset, $limit)
    {
        $returnType = '';
        $request = $this->viewListOfImagesOfCourseRequest($course_id, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewListOfImagesOfCourse'
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of materials to show (i.e. 25) (required)
     * @param  float $limit Amount of materials to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function viewListOfImagesOfCourseRequest($course_id, $offset, $limit)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null || (is_array($course_id) && count($course_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $course_id when calling viewListOfImagesOfCourse'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling viewListOfImagesOfCourse'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling viewListOfImagesOfCourse'
            );
        }

        $resourcePath = '/course/{course_id}/images&offset={offset}&limit={limit}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                '{' . 'course_id' . '}',
                ObjectSerializer::toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($offset !== null) {
            $resourcePath = str_replace(
                '{' . 'offset' . '}',
                ObjectSerializer::toPathValue($offset),
                $resourcePath
            );
        }
        // path params
        if ($limit !== null) {
            $resourcePath = str_replace(
                '{' . 'limit' . '}',
                ObjectSerializer::toPathValue($limit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewListOfMaterialsOfCourse
     *
     * View list of materials of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of materials to show (i.e. 25) (required)
     * @param  float $limit Amount of materials to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \YellowWave\SwaggerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \YellowWave\SwaggerClient\Model\InlineResponse2003
     */
    public function viewListOfMaterialsOfCourse($course_id, $offset, $limit)
    {
        list($response) = $this->viewListOfMaterialsOfCourseWithHttpInfo($course_id, $offset, $limit);
        return $response;
    }

    /**
     * Operation viewListOfMaterialsOfCourseWithHttpInfo
     *
     * View list of materials of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of materials to show (i.e. 25) (required)
     * @param  float $limit Amount of materials to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \YellowWave\SwaggerClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \YellowWave\SwaggerClient\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewListOfMaterialsOfCourseWithHttpInfo($course_id, $offset, $limit)
    {
        $returnType = '\YellowWave\SwaggerClient\Model\InlineResponse2003';
        $request = $this->viewListOfMaterialsOfCourseRequest($course_id, $offset, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\YellowWave\SwaggerClient\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewListOfMaterialsOfCourseAsync
     *
     * View list of materials of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of materials to show (i.e. 25) (required)
     * @param  float $limit Amount of materials to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewListOfMaterialsOfCourseAsync($course_id, $offset, $limit)
    {
        return $this->viewListOfMaterialsOfCourseAsyncWithHttpInfo($course_id, $offset, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewListOfMaterialsOfCourseAsyncWithHttpInfo
     *
     * View list of materials of Course
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of materials to show (i.e. 25) (required)
     * @param  float $limit Amount of materials to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewListOfMaterialsOfCourseAsyncWithHttpInfo($course_id, $offset, $limit)
    {
        $returnType = '\YellowWave\SwaggerClient\Model\InlineResponse2003';
        $request = $this->viewListOfMaterialsOfCourseRequest($course_id, $offset, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewListOfMaterialsOfCourse'
     *
     * @param  float $course_id ID of the Course in the form of an integer (required)
     * @param  float $offset Start offset of materials to show (i.e. 25) (required)
     * @param  float $limit Amount of materials to show in one response (i.e. 25, limited to 100) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function viewListOfMaterialsOfCourseRequest($course_id, $offset, $limit)
    {
        // verify the required parameter 'course_id' is set
        if ($course_id === null || (is_array($course_id) && count($course_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $course_id when calling viewListOfMaterialsOfCourse'
            );
        }
        // verify the required parameter 'offset' is set
        if ($offset === null || (is_array($offset) && count($offset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offset when calling viewListOfMaterialsOfCourse'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling viewListOfMaterialsOfCourse'
            );
        }

        $resourcePath = '/course/{course_id}/materials&offset={offset}&limit={limit}&label={label}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($course_id !== null) {
            $resourcePath = str_replace(
                '{' . 'course_id' . '}',
                ObjectSerializer::toPathValue($course_id),
                $resourcePath
            );
        }
        // path params
        if ($offset !== null) {
            $resourcePath = str_replace(
                '{' . 'offset' . '}',
                ObjectSerializer::toPathValue($offset),
                $resourcePath
            );
        }
        // path params
        if ($limit !== null) {
            $resourcePath = str_replace(
                '{' . 'limit' . '}',
                ObjectSerializer::toPathValue($limit),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-Api-Key');
        if ($apiKey !== null) {
            $headers['X-Api-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
